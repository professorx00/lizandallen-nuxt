// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String   @unique
  password  String
  role      Role     @default(USER)
  resetPassword Boolean @default(false)
  token     String?
  refreshToken String?
  addresses Addresses[]
  billingAddresses BillingAddresses[]
  messages  Messages[]
  orders    Orders[]

}


model Addresses{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  street    String
  street2   String
  city      String
  state     String
  zip       String
  country   String
  Orders    Orders[]
  archived  Boolean  @default(false)
  userID    Int @unique
  Users     Users @relation(fields: [userID], references: [id])
}

model BillingAddresses{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  street    String
  street2   String
  city      String
  state     String
  zip       String
  country   String
  Orders    Orders[]
  archived  Boolean  @default(false)
  userID    Int @unique
  Users     Users @relation(fields: [userID], references: [id])
}

model Orders{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shippingAddressID Int
  billingAddressID  Int
  shippingAddress   Addresses @relation(fields: [shippingAddressID], references: [id])
  billingAddress    BillingAddresses @relation( fields: [billingAddressID], references: [id])
  orderStatus       OrderStatus @default(CREATED)
  cartID            Carts?
  userID            Int
  Users             Users @relation(fields: [userID], references: [id])
}

model Carts{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderID   Int @unique
  Orders    Orders @relation(fields: [orderID], references: [id])
  CartProducts CartProducts[]
}

model CartProducts{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  quantity  Int
  cartId    Int
  cart      Carts @relation(fields: [cartId], references: [id])
  productId Int
  Products  Products @relation(fields: [productId], references: [id])
}

model Products{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  price     Float
  description String
  image     String
  imageAlt  String
  inventory Int @default(0)
  leftInStock Int @default(0)
  carts     CartProducts[]
}

model Messages{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  firstName String
  lastName  String
  email     String
  phone     String
  message   String
  responseType Response @default(CREATED)
  responderId Int
  Users     Users @relation(fields: [responderId], references: [id])
}

model Gallery{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
  imageAlt  String
  archived  Boolean  @default(false)
}

model About{
  id        Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String
  imageAlt  String
  title     String
  description String
  archived  Boolean  @default(false)
}

enum Response {
  CREATED
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}

enum OrderStatus {
  CREATED
  IN_PROGRESS
  SHIPPED
  DELIVERED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}